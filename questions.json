[
    {
      "question": "ما الغرض من الكلمة المفتاحية `return` في دالة برمجية؟",
      "answer": "تُستخدم `return` لإنهاء تنفيذ الدالة وإعادة قيمة ناتجة عن تلك الدالة إلى المكان الذي تم استدعاؤها منه.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هي المصفوفة (Array)؟",
      "answer": "المصفوفة هي هيكل بيانات يخزن مجموعة من العناصر من نفس النوع في مواقع ذاكرة متجاورة، ويمكن الوصول إلى كل عنصر باستخدام فهرس رقمي.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "كيف تقوم بإضافة تعليق (comment) في لغة Python؟",
      "answer": "لإضافة تعليق من سطر واحد في Python، نستخدم علامة الهاش `#`. كل ما يأتي بعدها في نفس السطر يعتبر تعليقًا.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما الفرق بين العدد الصحيح (Integer) والعدد العشري (Float)؟",
      "answer": "العدد الصحيح (Integer) هو عدد كامل بدون كسور (مثل 5، -10). العدد العشري (Float) هو عدد يحتوي على فاصلة عشرية (مثل 3.14، -0.5).",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ماذا تفعل جملة `else` في بنية `if-else` الشرطية؟",
      "answer": "جملة `else` تقوم بتنفيذ كتلة من الكود في حالة عدم تحقق الشرط الموجود في جملة `if`.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هي السلسلة النصية (String)؟",
      "answer": "السلسلة النصية هي تسلسل من الأحرف، مثل الكلمات والجمل. يتم عادةً تعريفها بوضع النص بين علامتي تنصيص مفردة أو مزدوجة.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "فيما يُستخدم عامل باقي القسمة (Modulus Operator `%`)؟",
      "answer": "يُستخدم للحصول على الباقي من عملية قسمة عدد صحيح على آخر. على سبيل المثال، `10 % 3` نتيجتها `1`.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "كيف تعلن عن متغير ثابت (constant) في JavaScript؟",
      "answer": "باستخدام الكلمة المفتاحية `const`. المتغيرات المعلنة بـ `const` لا يمكن إعادة تعيين قيمة جديدة لها بعد إعلانها الأولي.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هي لغة HTML؟",
      "answer": "HTML (HyperText Markup Language) هي لغة الترميز القياسية المستخدمة لإنشاء وهيكلة صفحات الويب ومحتواها.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "فيما تُستخدم لغة CSS؟",
      "answer": "CSS (Cascading Style Sheets) هي لغة تُستخدم لوصف مظهر وتنسيق مستند مكتوب بلغة ترميز مثل HTML، مثل الألوان والخطوط والتخطيط.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هي القيمة البوليانية (Boolean)؟",
      "answer": "هي نوع بيانات منطقي يمكن أن يحمل إحدى قيمتين فقط: `true` (صحيح) أو `false` (خطأ).",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما الغرض من حلقة `while` التكرارية؟",
      "answer": "تُستخدم حلقة `while` لتكرار تنفيذ كتلة من الكود طالما أن شرطًا معينًا يظل صحيحًا. تُستخدم عندما لا يكون عدد التكرارات معروفًا مسبقًا.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هي عملية 'الدمج' (Concatenation)؟",
      "answer": "هي عملية ربط سلسلتين نصيتين أو أكثر معًا لتكوين سلسلة نصية واحدة جديدة.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'المُعامل' أو 'الوسيط' (Argument/Parameter) في دالة؟",
      "answer": "المُعامل (Parameter) هو متغير يتم إدراجه في تعريف الدالة. الوسيط (Argument) هو القيمة الفعلية التي يتم تمريرها إلى الدالة عند استدعائها.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو عامل الإسناد (Assignment Operator)؟",
      "answer": "هو العامل الذي يُستخدم لتعيين قيمة لمتغير. في معظم اللغات، يتم تمثيله بعلامة يساوي واحدة `=`.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'النوع' (Type) الثابت والديناميكي في لغات البرمجة؟",
      "answer": "في اللغات ذات النوع الثابت (Statically Typed) مثل Java و C#، يجب تحديد نوع المتغير عند الإعلان عنه ولا يمكن تغييره. في اللغات ذات النوع الديناميكي (Dynamically Typed) مثل Python و JavaScript, يتم تحديد نوع المتغير تلقائيًا في وقت التشغيل ويمكن أن يتغير.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'هيكل البيانات' (Data Structure)؟ اذكر مثالين.",
      "answer": "هيكل البيانات هو طريقة لتنظيم وتخزين البيانات في الحاسوب بكفاءة. أمثلة شائعة تشمل المصفوفات (Arrays) لتخزين قائمة من العناصر، والقوائم المرتبطة (Linked Lists) التي تسمح بإضافة وحذف العناصر بسهولة.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'الخادم' (Server) في سياق الويب؟",
      "answer": "الخادم هو حاسوب قوي متصل بالإنترنت بشكل دائم، وظيفته تخزين ملفات ومواقع الويب وتشغيل التطبيقات، ثم إرسالها إلى متصفح المستخدم عند طلبها.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ماذا يعني مصطلح 'تصحيح الأخطاء' (Debugging)؟",
      "answer": "هو عملية البحث عن الأخطاء (Bugs) في الكود البرمجي وإصلاحها لضمان عمل البرنامج بالشكل الصحيح.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'التحكم في الإصدار' (Version Control) وما فائدته؟",
      "answer": "هو نظام يسجل التغييرات التي تتم على ملف أو مجموعة من الملفات بمرور الوقت، بحيث يمكنك استرجاع إصدارات محددة لاحقًا. فائدته تكمن في تتبع التعديلات والتعاون بين المطورين. أشهر مثال هو Git.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'إطار العمل' (Framework)؟",
      "answer": "إطار العمل هو مجموعة من المكتبات والأدوات والقواعد التي توفر هيكلاً أساسيًا لبناء التطبيقات. هو يفرض طريقة معينة لتنظيم الكود ويوفر وظائف جاهزة لتسريع عملية التطوير.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما الفرق بين `HTTP` و `HTTPS`؟",
      "answer": "كلاهما بروتوكول لنقل البيانات على الويب. الفرق الرئيسي هو أن `HTTPS` (الحرف S يعني Secure) يقوم بتشفير البيانات المنقولة بين المتصفح والخادم، مما يوفر طبقة أمان وحماية للخصوصية.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'الكائن' (Object) في البرمجة؟",
      "answer": "الكائن هو بنية بيانات تجمع بين متغيرات (تسمى خصائص) ودوال (تسمى وظائف أو methods) في كيان واحد. يمثل الكائن شيئًا من العالم الحقيقي له خصائص وسلوكيات.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ماذا تفعل دالة `console.log()` في JavaScript؟",
      "answer": "تُستخدم لطباعة أو عرض أي نوع من البيانات (نصوص، أرقام، كائنات) في وحدة تحكم المطور (Developer Console) بالمتصفح، وهي أداة أساسية لتصحيح الأخطاء.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'الشرط الثلاثي' (Ternary Operator)؟",
      "answer": "هو طريقة مختصرة لكتابة جملة `if-else` في سطر واحد. صيغته العامة هي: `condition ? value_if_true : value_if_false`.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'نظام الملفات' (File System)؟",
      "answer": "هو الطريقة التي يتم بها تنظيم وتخزين الملفات على جهاز تخزين مثل القرص الصلب. يحدد كيفية تسمية الملفات وتخزينها والوصول إليها.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'الطرف الثالث' (Third-party) في البرمجة؟",
      "answer": "يشير إلى أي مكتبة أو خدمة أو كود يتم تطويره بواسطة شركة أو مطور آخر غير المطور الأصلي للتطبيق. يتم استخدامه لتوفير وظائف إضافية دون الحاجة لبنائها من الصفر.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما الفرق بين `i++` و `++i`؟",
      "answer": "`i++` (Post-increment) تستخدم قيمة `i` الحالية في التعبير ثم تزيدها بمقدار واحد. `++i` (Pre-increment) تزيد قيمة `i` أولاً ثم تستخدم القيمة الجديدة في التعبير.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'التحويل' (Casting) بين أنواع البيانات؟",
      "answer": "هو عملية تحويل متغير من نوع بيانات إلى نوع آخر. على سبيل المثال، تحويل سلسلة نصية تحتوي على رقم (مثل '123') إلى عدد صحيح (123).",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'البرنامج المساعد' (Plugin)؟",
      "answer": "هو مكون برمجي يضيف ميزة أو وظيفة محددة إلى برنامج موجود. على سبيل المثال، إضافات المتصفح هي نوع من الـ Plugins.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'الخوارزمية' (Algorithm)؟",
      "answer": "الخوارزمية هي مجموعة من الخطوات أو القواعد المحددة جيدًا والتي يتم اتباعها لحل مشكلة معينة أو لإنجاز مهمة محددة.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "اشرح مفهوم 'سلسلة النطاق' (Scope Chain) في JavaScript.",
      "answer": "عندما يتم البحث عن متغير داخل دالة، يبحث JavaScript أولاً في النطاق المحلي للدالة. إذا لم يجده، ينتقل إلى النطاق الخارجي (الذي يحتوي على الدالة)، وهكذا حتى يصل إلى النطاق العالمي. هذه السلسلة من النطاقات تسمى Scope Chain.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو JSON وفيما يستخدم؟",
      "answer": "JSON (JavaScript Object Notation) هو تنسيق خفيف لتبادل البيانات. يُستخدم بشكل أساسي لنقل البيانات بين الخادم وتطبيق الويب، وهو سهل القراءة والكتابة للبشر وسهل التحليل للآلات.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما الفرق بين `let`, `const`, و `var` في JavaScript؟",
      "answer": "`var` له نطاق دالة (function-scoped) ويمكن إعادة تعريفه. `let` و `const` لهما نطاق كتلة (block-scoped). `let` يمكن إعادة تعيين قيمته، بينما `const` لا يمكن.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "اشرح الكلمة المفتاحية `this` في JavaScript.",
      "answer": "تشير `this` إلى الكائن الذي تنتمي إليه الدالة التي يتم تنفيذها حاليًا. تعتمد قيمتها على كيفية استدعاء الدالة (سياق التنفيذ).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي 'دالة رد الاتصال' (Callback Function)؟",
      "answer": "هي دالة يتم تمريرها كوسيط (argument) إلى دالة أخرى، ليتم استدعاؤها (تنفيذها) لاحقًا بعد انتهاء عملية معينة. تُستخدم بشكل شائع في البرمجة غير المتزامنة.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو الـ Promise في JavaScript؟",
      "answer": "الـ Promise هو كائن يمثل الإكمال (أو الفشل) النهائي لعملية غير متزامنة. له ثلاث حالات: معلق (pending)، مكتمل (fulfilled)، أو مرفوض (rejected).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "اشرح مفهوم 'النموذج الأولي' (Prototype) لكائن في JavaScript.",
      "answer": "كل كائن في JavaScript له خاصية داخلية تسمى Prototype، والتي تكون مرجعًا لكائن آخر. عندما تحاول الوصول إلى خاصية غير موجودة في كائن، يبحث JavaScript عنها في الـ Prototype الخاص به.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي البرمجة كائنية التوجه (OOP)؟",
      "answer": "هي نموذج برمجي يعتمد على مفهوم 'الكائنات' (Objects)، التي يمكن أن تحتوي على بيانات (خصائص) ورمز (وظائف). تهدف إلى تنظيم البرامج المعقدة في هياكل بسيطة وقابلة لإعادة الاستخدام.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو المفتاح الأساسي (Primary Key) في قاعدة بيانات SQL؟",
      "answer": "المفتاح الأساسي هو عمود (أو مجموعة من الأعمدة) في جدول SQL يحدد بشكل فريد كل صف في ذلك الجدول. يجب أن يحتوي على قيم فريدة ولا يمكن أن يحتوي على قيم `NULL`.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما الفرق بين `INNER JOIN` و `LEFT JOIN` في SQL؟",
      "answer": "`INNER JOIN` تُرجع الصفوف التي لها قيم متطابقة في كلا الجدولين. `LEFT JOIN` تُرجع كل الصفوف من الجدول الأيسر، والصفوف المتطابقة من الجدول الأيمن (و `NULL` إذا لم يكن هناك تطابق).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'نموذج الصندوق' (Box Model) في CSS؟",
      "answer": "هو مفهوم أساسي في CSS يصف كل عنصر HTML على أنه صندوق مستطيل. يتكون هذا الصندوق من أربع مناطق: المحتوى (Content)، الحشو (Padding)، الإطار (Border)، والهامش (Margin).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'تفويض الأحداث' (Event Delegation) في JavaScript؟",
      "answer": "هي تقنية تعتمد على إضافة مستمع حدث واحد (event listener) إلى عنصر أب، بدلاً من إضافته إلى كل عنصر ابن على حدة. هذا يحسن الأداء ويسمح بالتعامل مع العناصر التي تتم إضافتها ديناميكيًا.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي 'الدالة النقية' (Pure Function)؟",
      "answer": "هي دالة تحقق شرطين: 1) تُرجع دائمًا نفس الناتج لنفس المدخلات. 2) ليس لها أي آثار جانبية (side effects)، أي أنها لا تعدل أي حالة خارج نطاقها.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو الفرق بين API والمكتبة (Library)؟",
      "answer": "المكتبة هي مجموعة من الأكواد الجاهزة التي يمكنك استدعاؤها في مشروعك (أنت تتحكم في التدفق). أما الـ API فهو واجهة تحدد كيفية تفاعل المكونات البرمجية مع بعضها البعض، وغالبًا ما يكون إطار العمل (Framework) هو الذي يستدعي كودك.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "اشرح ما هو 'جدول التجزئة' (Hash Table).",
      "answer": "هو هيكل بيانات يخزن البيانات في شكل أزواج (مفتاح-قيمة). يستخدم دالة تجزئة (hash function) لحساب فهرس في مصفوفة، حيث يتم تخزين القيمة. هذا يسمح بالوصول إلى البيانات بسرعة كبيرة (في المتوسط O(1)).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'التعقيد الزمني' (Time Complexity) ولماذا هو مهم؟",
      "answer": "التعقيد الزمني هو مقياس لكمية الوقت التي تستغرقها خوارزمية ما لتكتمل كدالة في حجم المدخلات. هو مهم لأنه يساعدنا على توقع أداء الخوارزمية ومقارنتها بأخرى، خاصة مع مجموعات البيانات الكبيرة.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي واجهة برمجة التطبيقات RESTful؟",
      "answer": "هي نمط معماري لتصميم تطبيقات الشبكة. تعتمد على استخدام بروتوكول HTTP بشكل قياسي، حيث يتم تمثيل الموارد (Resources) كعناوين URL ويتم استخدام أفعال HTTP (GET, POST, PUT, DELETE) للتفاعل معها.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما الفرق بين `localStorage` و `sessionStorage`؟",
      "answer": "كلاهما يخزن البيانات في المتصفح. البيانات في `localStorage` تبقى حتى يتم حذفها يدويًا ولا تنتهي صلاحيتها. أما البيانات في `sessionStorage` فيتم حذفها بمجرد إغلاق تبويب أو نافذة المتصفح.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي مبادئ OOP الأربعة الرئيسية؟",
      "answer": "المبادئ الأربعة هي: 1) التغليف (Encapsulation)، 2) الوراثة (Inheritance)، 3) تعدد الأشكال (Polymorphism)، 4) التجريد (Abstraction).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما الفرق بين `Pass by Value` و `Pass by Reference`؟",
      "answer": "`Pass by Value` يعني أنه عند تمرير متغير إلى دالة، يتم إنشاء نسخة من قيمته، وأي تغيير داخل الدالة لا يؤثر على المتغير الأصلي. `Pass by Reference` يعني أنه يتم تمرير عنوان المتغير في الذاكرة، وأي تغيير داخل الدالة يؤثر مباشرة على المتغير الأصلي.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'الرفع' (Hoisting) في JavaScript؟",
      "answer": "هي آلية في JavaScript يتم فيها نقل إعلانات المتغيرات والدوال إلى أعلى نطاقها (scope) قبل تنفيذ الكود. هذا يعني أنه يمكنك استخدام متغير أو دالة قبل الإعلان الفعلي عنها في الكود.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'التحقق من صحة المدخلات' (Input Validation)؟",
      "answer": "هي عملية التحقق من أن البيانات التي يدخلها المستخدم تفي بمعايير معينة (مثل أن يكون البريد الإلكتروني صالحًا، أو أن يكون العمر رقمًا). هذه العملية ضرورية للأمان وجودة البيانات.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'المصادقة' (Authentication) و 'التفويض' (Authorization)؟",
      "answer": "المصادقة هي عملية التحقق من هوية المستخدم (من أنت؟). التفويض هي عملية تحديد الصلاحيات التي يمتلكها المستخدم المصادق عليه (ماذا يمكنك أن تفعل؟).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما الفرق بين SQL و NoSQL؟",
      "answer": "SQL هي قواعد بيانات علائقية ذات مخطط ثابت (جداول وأعمدة). NoSQL هي قواعد بيانات غير علائقية ذات مخطط ديناميكي (مثل قواعد بيانات المستندات أو أزواج المفتاح-القيمة)، وهي أكثر مرونة وقابلية للتوسع الأفقي.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي 'الدالة السهمية' (Arrow Function) في JavaScript؟",
      "answer": "هي طريقة مختصرة لكتابة الدوال في JavaScript. تتميز بأنها لا تملك سياق `this` خاص بها، بل ترثه من النطاق المحيط بها، مما يحل العديد من المشاكل المتعلقة بـ `this`.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو Git وفيما يستخدم؟",
      "answer": "Git هو نظام تحكم في الإصدارات موزع، يُستخدم لتتبع التغييرات في الكود البرمجي أثناء تطوير البرمجيات. يسمح لعدة مطورين بالعمل على نفس المشروع بشكل متزامن دون تعارض.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'الاستثناء' (Exception) وكيف يتم التعامل معه؟",
      "answer": "الاستثناء هو حدث غير متوقع يحدث أثناء تنفيذ البرنامج ويعطل التدفق الطبيعي له. يتم التعامل معه باستخدام كتل `try...catch`، حيث يتم وضع الكود الذي قد يسبب الخطأ في كتلة `try`، ويتم التقاط الخطأ ومعالجته في كتلة `catch`.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'التجريد' (Abstraction) في البرمجة؟",
      "answer": "هو مبدأ يركز على إخفاء التفاصيل المعقدة للتنفيذ وإظهار الوظائف الأساسية فقط للمستخدم. يسمح للمطورين بالتعامل مع الكائنات على مستوى عالٍ دون الحاجة لمعرفة كيفية عملها من الداخل.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو 'التغليف' (Encapsulation)؟",
      "answer": "هو مبدأ ربط البيانات (الخصائص) والوظائف التي تتعامل معها معًا في وحدة واحدة (كائن)، مع إخفاء الحالة الداخلية للكائن عن العالم الخارجي والتحكم في الوصول إليها من خلال واجهة عامة.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي 'حلقة الأحداث' (Event Loop) في JavaScript وكيف تعمل؟",
      "answer": "حلقة الأحداث هي آلية تسمح لـ JavaScript بتنفيذ عمليات غير متزامنة. تعمل باستمرار على فحص 'طابور رد الاتصال' (Callback Queue). إذا كان 'مكدس الاستدعاء' (Call Stack) فارغًا، فإنها تأخذ أول حدث من الطابور وتدفعه إلى المكدس ليتم تنفيذه.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "قارن بين Promises و `async/await`.",
      "answer": "`async/await` هي 'سكر نحوي' (syntactic sugar) مبني فوق الـ Promises لجعل الكود غير المتزامن يبدو وكأنه كود متزامن وأسهل في القراءة. دالة `async` تُرجع دائمًا Promise، و `await` توقف تنفيذ الدالة مؤقتًا حتى يكتمل الـ Promise.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هي WebSockets وكيف تختلف عن HTTP؟",
      "answer": "HTTP هو بروتوكول طلب-استجابة (request-response). أما WebSockets فتوفر قناة اتصال ثنائية الاتجاه ومستمرة بين العميل والخادم، مما يسمح للخادم بإرسال البيانات إلى العميل دون أن يطلبها العميل أولاً. هذا مثالي للتطبيقات اللحظية مثل الدردشة والألعاب.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "اشرح مبادئ 'SOLID' في تصميم البرمجة كائنية التوجه.",
      "answer": "SOLID هي خمسة مبادئ تصميم تهدف إلى جعل البرامج أكثر قابلية للفهم والصيانة والتوسيع. وهي: مبدأ المسؤولية الواحدة (SRP)، مبدأ الفتح/الإغلاق (OCP)، مبدأ استبدال ليسكوف (LSP)، مبدأ فصل الواجهة (ISP)، ومبدأ انعكاس التبعية (DIP).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هي 'فهرسة قاعدة البيانات' (Database Indexing) ولماذا هي مهمة؟",
      "answer": "الفهرسة هي تقنية لتحسين أداء عمليات استرجاع البيانات من جدول قاعدة البيانات. تعمل عن طريق إنشاء هيكل بيانات خاص (مثل B-Tree) يسمح بالوصول السريع إلى الصفوف بناءً على قيم أعمدة معينة، بدلاً من فحص الجدول بأكمله.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "اشرح مفهوم 'حقن التبعية' (Dependency Injection).",
      "answer": "هو نمط تصميم يتم فيه توفير 'التبعيات' (الكائنات التي يعتمد عليها كائن آخر) من مصدر خارجي، بدلاً من أن يقوم الكائن بإنشائها بنفسه. هذا يزيد من مرونة الكود ويسهل عملية الاختبار.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'حالة السباق' (Race Condition) في البرمجة المتزامنة؟",
      "answer": "تحدث حالة السباق عندما يعتمد سلوك نظام ما على تسلسل أو توقيت أحداث لا يمكن التحكم فيها. تحدث عادةً عندما تحاول عدة عمليات (threads) الوصول إلى وتعديل نفس المورد المشترك في نفس الوقت، مما يؤدي إلى نتائج غير متوقعة.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "صف خوارزمية البحث الثنائي (Binary Search) وما هو تعقيدها الزمني؟",
      "answer": "هي خوارزمية بحث فعالة تعمل على مصفوفة مرتبة. تبدأ بمقارنة العنصر الأوسط في المصفوفة بالقيمة المستهدفة. إذا تطابقا، ينتهي البحث. إذا كانت القيمة المستهدفة أصغر، يتم تكرار البحث في النصف الأيسر، وإلا يتم تكراره في النصف الأيمن. تعقيدها الزمني هو O(log n).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هي البرمجة الديناميكية (Dynamic Programming)؟",
      "answer": "هي طريقة لحل المشاكل المعقدة عن طريق تقسيمها إلى مشاكل فرعية أبسط. تتميز بتخزين نتائج المشاكل الفرعية لتجنب إعادة حسابها مرة أخرى، مما يحسن الكفاءة بشكل كبير. تُستخدم عادةً في مشاكل التحسين (Optimization).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "اشرح نمط التصميم 'المراقب' (Observer Pattern).",
      "answer": "هو نمط تصميم سلوكي يُعرّف علاقة 'واحد إلى متعدد' بين الكائنات. عندما يتغير 'الموضوع' (Subject) حالته، يتم إعلام كل 'المراقبين' (Observers) التابعين له وتحديثهم تلقائيًا.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو هجوم 'Cross-Site Scripting' (XSS) وكيف يمكن منعه؟",
      "answer": "هو نوع من هجمات حقن الكود، حيث يقوم المهاجم بحقن سكربتات خبيثة في صفحات الويب التي يشاهدها المستخدمون الآخرون. يمكن منعه عن طريق 'تعقيم' (sanitizing) وتنقية مدخلات المستخدم قبل عرضها في الصفحة، والتأكد من ترميز أي محتوى يتم عرضه.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'التخزين المؤقت' (Memoization) وكيف يمكن استخدامه؟",
      "answer": "هي تقنية تحسين تُستخدم لتسريع البرامج عن طريق تخزين نتائج استدعاءات الدوال باهظة التكلفة وإعادة نفس النتيجة المخزنة عند حدوث نفس الاستدعاء مرة أخرى. هي طريقة محددة للتخزين المؤقت (caching).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "اشرح الفرق بين 'التحويل البرمجي' (Compilation) و 'التحويل المصدري' (Transpilation).",
      "answer": "التحويل البرمجي (Compilation) هو تحويل كود من لغة عالية المستوى إلى لغة منخفضة المستوى (مثل لغة الآلة). أما التحويل المصدري (Transpilation) فهو تحويل كود من لغة عالية المستوى إلى لغة أخرى عالية المستوى بنفس مستوى التجريد (مثل تحويل TypeScript إلى JavaScript).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هي 'الدالة عالية الرتبة' (Higher-Order Function)؟",
      "answer": "هي دالة تحقق واحدًا من الشرطين على الأقل: 1) تقبل دالة أخرى كوسيط (argument). 2) تُرجع دالة كنتيجة لها.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'تعدد الأشكال' (Polymorphism)؟",
      "answer": "هو مبدأ في البرمجة كائنية التوجه يسمح للكائنات من فئات مختلفة بالاستجابة لنفس الرسالة (استدعاء الدالة) بطرق مختلفة. يسمح بكتابة كود أكثر مرونة وقابلية لإعادة الاستخدام.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما الفرق بين 'التجريد' (Abstraction) و 'التغليف' (Encapsulation)؟",
      "answer": "التجريد يركز على إخفاء التعقيد وإظهار الوظائف الأساسية (ماذا يفعل الكائن). التغليف يركز على ربط البيانات بالوظائف التي تتعامل معها وإخفاء الحالة الداخلية للكائن (كيف يفعل الكائن ذلك).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'التحميل الزائد للدالة' (Function Overloading)؟",
      "answer": "هي ميزة في بعض اللغات (مثل C++ و Java) تسمح بتعريف عدة دوال بنفس الاسم ولكن بقوائم معاملات (parameters) مختلفة (إما في العدد أو النوع).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هي 'شجرة البحث الثنائية' (Binary Search Tree - BST)؟",
      "answer": "هي هيكل بيانات شجري حيث يكون لكل عقدة قيمة، وتكون كل القيم في الشجرة الفرعية اليسرى أصغر من قيمة العقدة، وكل القيم في الشجرة الفرعية اليمنى أكبر منها. هذا يسمح بعمليات بحث وإضافة وحذف فعالة.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'التطبيع' (Normalization) في قواعد البيانات؟",
      "answer": "هي عملية تنظيم أعمدة وجداول قاعدة بيانات علائقية لتقليل تكرار البيانات وتحسين سلامة البيانات. تتضمن تقسيم الجداول الكبيرة إلى جداول أصغر وأفضل تنظيمًا وربطها ببعضها.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'الخيط' (Thread) في أنظمة التشغيل؟",
      "answer": "الخيط هو أصغر وحدة تنفيذ يمكن لنظام التشغيل جدولتها. يمكن أن تحتوي العملية (Process) الواحدة على عدة خيوط تعمل بشكل متزامن، وتتشارك في نفس مساحة الذاكرة.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'الجمود' (Deadlock) في البرمجة المتوازية؟",
      "answer": "هو حالة تحدث عندما تنتظر عمليتان أو أكثر بعضهما البعض لتحرير مورد ما، مما يؤدي إلى توقف جميع العمليات عن التقدم إلى الأبد.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'التجزئة' (Hashing) وفيما يختلف عن 'التشفير' (Encryption)؟",
      "answer": "التجزئة هي عملية تحويل بيانات إلى سلسلة نصية ثابتة الطول (hash) وهي عملية أحادية الاتجاه (لا يمكن عكسها). التشفير هو عملية تحويل البيانات إلى صيغة غير قابلة للقراءة وهي عملية ثنائية الاتجاه (يمكن فك تشفيرها باستخدام مفتاح).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'التوقيع الرقمي' (Digital Signature)؟",
      "answer": "هو آلية تشفير تُستخدم للتحقق من صحة وسلامة رسالة أو مستند رقمي. يضمن أن الرسالة جاءت من المرسل المزعوم ولم يتم التلاعب بها.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'مبدأ المسؤولية الواحدة' (Single Responsibility Principle)؟",
      "answer": "هو أحد مبادئ SOLID وينص على أن كل كلاس أو وحدة برمجية يجب أن يكون لها مسؤولية واحدة فقط، أي يجب أن يكون هناك سبب واحد فقط لتغيير هذا الكلاس.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'التخزين المؤقت' (Caching) في تطوير الويب؟",
      "answer": "هو عملية تخزين نسخ من الملفات أو البيانات في موقع مؤقت (cache) للوصول إليها بسرعة أكبر في المستقبل. يُستخدم لتحسين أداء وسرعة تحميل مواقع الويب.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'موازن التحميل' (Load Balancer)؟",
      "answer": "هو جهاز أو برنامج يقوم بتوزيع حركة مرور الشبكة الواردة عبر مجموعة من الخوادم. يُستخدم لتحسين استجابة وموثوقية التطبيقات عن طريق منع перегрузка أي خادم واحد.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'التعلم الآلي' (Machine Learning)؟",
      "answer": "هو فرع من الذكاء الاصطناعي يركز على بناء أنظمة يمكنها التعلم من البيانات وتحديد الأنماط واتخاذ القرارات بأقل تدخل بشري.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'البرنامج الوسيط' (Middleware) في سياق تطبيقات الويب؟",
      "answer": "هو برنامج يعمل كوسيط بين طلب العميل واستجابة الخادم. يمكنه تنفيذ مهام مثل تسجيل الطلبات، المصادقة، أو تعديل الطلب والاستجابة قبل أن يصلا إلى وجهتهما النهائية.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما الفرق بين 'الواجهة' (Interface) و 'الكلاس المجرد' (Abstract Class)؟",
      "answer": "الواجهة تحدد 'عقدًا' من الوظائف التي يجب على أي كلاس ينفذها توفيرها، ولا يمكن أن تحتوي على تطبيق. الكلاس المجرد يمكن أن يحتوي على وظائف مطبقة وغير مطبقة، ويمكن أن يرث منه كلاس واحد فقط، بينما يمكن للكلاس تنفيذ عدة واجهات.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هي 'الخوارزميات الجشعة' (Greedy Algorithms)؟",
      "answer": "هي خوارزميات تتخذ القرار الأمثل محليًا في كل خطوة على أمل الوصول إلى الحل الأمثل عالميًا. لا تضمن دائمًا الحل الأفضل، ولكنها غالبًا ما تكون سريعة وبسيطة.",
      "difficulty": "hard",
      "mastered": false
    }   
]
