[
    {
      "question": "ما هو \"المتغير\" (Variable) في البرمجة؟",
      "answer": "المتغير هو حاوية أو مساحة في ذاكرة الحاسوب تُستخدم لتخزين قيمة معينة (مثل رقم أو نص). يمكن الإشارة إلى هذه القيمة وتغييرها باستخدام اسم فريد يُطلق على المتغير.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما الفرق الرئيسي بين `==` و `===` في لغة JavaScript؟",
      "answer": "المُعامل `==` يقوم بالمقارنة بعد تحويل النوع (Type Coercion)، أي أنه قد يعتبر الرقم `5` والنص `\"5\"` متساويين. بينما المُعامل `===` (المقارنة الصارمة) يقارن القيمة والنوع معًا، ولن يعتبرهما متساويين إلا إذا كانا من نفس النوع ونفس القيمة.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "اشرح مفهوم \"الوراثة\" (Inheritance) في البرمجة كائنية التوجه (OOP) مع ذكر فائدة واحدة لها.",
      "answer": "الوراثة هي آلية تسمح لكلاس (فئة فرعية) بأن يرث الخصائص والوظائف من كلاس آخر (فئة أساسية). فائدتها الرئيسية هي إعادة استخدام الكود (Code Reusability)، حيث لا نحتاج لإعادة كتابة الخصائص والوظائف المشتركة في كل كلاس جديد.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو الفرق بين `null` و `undefined` في لغة JavaScript؟",
      "answer": "`undefined` يعني أنه تم الإعلان عن متغير ولكن لم يتم تعيين قيمة له بعد. بينما `null` هو قيمة يتم تعيينها بشكل صريح لمتغير ليعني 'لا توجد قيمة' أو 'قيمة فارغة'.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هي واجهة برمجة التطبيقات (API)؟ اشرحها بمثال بسيط.",
      "answer": "الـ API هي مجموعة من القواعد والبروتوكولات التي تسمح لتطبيقات مختلفة بالتواصل مع بعضها البعض. مثال: عندما تستخدم تطبيق الطقس على هاتفك، يقوم التطبيق بإرسال طلب عبر API إلى خادم الطقس للحصول على البيانات وعرضها لك.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'التحويل البرمجي' (Compilation) و 'التفسير' (Interpretation)؟",
      "answer": "التحويل البرمجي (Compilation) هو عملية تحويل الكود المصدري بالكامل إلى لغة الآلة قبل تنفيذه (مثل لغات C++ و Java). أما التفسير (Interpretation) فيتم فيه ترجمة وتنفيذ الكود سطراً بسطر في وقت التشغيل (مثل لغات Python و JavaScript).",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "اشرح مفهوم 'العودية' (Recursion) في البرمجة.",
      "answer": "العودية هي تقنية برمجية تقوم فيها الدالة باستدعاء نفسها لحل مشكلة معينة. يجب أن تحتوي الدالة العودية على 'حالة أساسية' (Base Case) لوقف التكرار ومنع حدوث حلقة لا نهائية.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما الفرق بين 'نطاق متغير' (Scope) محلي وعالمي؟",
      "answer": "المتغير العالمي (Global Scope) يمكن الوصول إليه من أي مكان في الكود. أما المتغير المحلي (Local Scope) فيكون معرفًا داخل دالة معينة ولا يمكن الوصول إليه إلا من داخل تلك الدالة.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هو نمط التصميم 'Singleton Pattern'؟ ومتى يكون استخدامه مفيدًا؟",
      "answer": "نمط Singleton هو نمط تصميم يضمن وجود نسخة (instance) واحدة فقط من كلاس معين في التطبيق بأكمله، ويوفر نقطة وصول عالمية لهذه النسخة. يكون مفيدًا عند إدارة الموارد المشتركة مثل الاتصال بقاعدة البيانات أو ملفات الإعدادات.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "اشرح الفرق بين البرمجة المتزامنة (Synchronous) وغير المتزامنة (Asynchronous).",
      "answer": "في البرمجة المتزامنة، يتم تنفيذ المهام واحدة تلو الأخرى بالترتيب، حيث يجب أن تنتهي المهمة الحالية قبل أن تبدأ التالية. أما في البرمجة غير المتزامنة، يمكن بدء مهمة جديدة قبل انتهاء المهمة الحالية، مما يسمح بتنفيذ عدة عمليات في نفس الوقت دون إيقاف البرنامج، وهو أمر حيوي لعمليات الشبكة أو التعامل مع الملفات.",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هي 'إدارة الذاكرة' (Memory Management) وما هو دور 'جامع القمامة' (Garbage Collector)؟",
      "answer": "إدارة الذاكرة هي عملية تخصيص وحجز مساحة في الذاكرة للمتغيرات والكائنات، ثم تحريرها عند عدم الحاجة إليها. في اللغات الحديثة، يقوم 'جامع القمامة' بهذه العملية تلقائيًا عن طريق تحديد الكائنات التي لم يعد من الممكن الوصول إليها في الكود وإزالة حجزها من الذاكرة لمنع تسرب الذاكرة (Memory Leaks).",
      "difficulty": "hard",
      "mastered": false
    },
    {
      "question": "ما هو 'النوع' (Type) الثابت والديناميكي في لغات البرمجة؟",
      "answer": "في اللغات ذات النوع الثابت (Statically Typed) مثل Java و C#، يجب تحديد نوع المتغير عند الإعلان عنه ولا يمكن تغييره. في اللغات ذات النوع الديناميكي (Dynamically Typed) مثل Python و JavaScript, يتم تحديد نوع المتغير تلقائيًا في وقت التشغيل ويمكن أن يتغير.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو 'هيكل البيانات' (Data Structure)؟ اذكر مثالين.",
      "answer": "هيكل البيانات هو طريقة لتنظيم وتخزين البيانات في الحاسوب بكفاءة. أمثلة شائعة تشمل المصفوفات (Arrays) لتخزين قائمة من العناصر، والقوائم المرتبطة (Linked Lists) التي تسمح بإضافة وحذف العناصر بسهولة.",
      "difficulty": "easy",
      "mastered": false
    },
    {
      "question": "ما هو الفرق بين `Pass by Value` و `Pass by Reference`؟",
      "answer": "`Pass by Value` يعني أنه عند تمرير متغير إلى دالة، يتم إنشاء نسخة من قيمته، وأي تغيير داخل الدالة لا يؤثر على المتغير الأصلي. `Pass by Reference` يعني أنه يتم تمرير عنوان المتغير في الذاكرة، وأي تغيير داخل الدالة يؤثر مباشرة على المتغير الأصلي.",
      "difficulty": "medium",
      "mastered": false
    },
    {
      "question": "ما هي 'البرمجة الوظيفية' (Functional Programming)؟",
      "answer": "هي نموذج برمجي يعتمد على استخدام الدوال الرياضية النقية (Pure Functions) وتجنب تغيير الحالة والبيانات القابلة للتغيير. تركز على 'ماذا تفعل' بدلاً من 'كيف تفعل'، وتستخدم مفاهيم مثل الدوال من الدرجة الأولى (First-class functions) والثبات (Immutability).",
      "difficulty": "hard",
      "mastered": false
    }
]
